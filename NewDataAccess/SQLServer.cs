/// ----------------------------------------------------
///This code was generated by Lang CodeSmith
///Class:D_CE_aircompany
///Copyright 2008(c) <Copyright>周浪</Copyright> 
///Author     :<Author>周浪(zhoulanga)</Author>
///Date       :01-14-2006
///Description:数据处理层
///----------------------------------------------------
using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Xml;
using System.Web;

namespace DataAccessLayer.DataAccess
{


    public sealed class SQLServer : Component
    {

        private SqlCommand privateCommand;
        private SqlConnection privateConnection;
        private string privateConnectionString;
        private string privateDatabase;
        private SqlDataReader privateDataReader;
        private DataSet privateDataSet;
        private bool privateDisposedBoolean;
        private const string privateExceptionMessage = "Data Application Error. Detail Error Information can be found in the Application Log";
        private string privateModuleName;
        private ArrayList privateParameterList;
        private string privatePassword;
        private SqlDataAdapter privateSQLDataAdapter;
        private string privateUserName;
        private XmlReader privateXMLReader;
        private string SqlstringName, setstring, aa;
        #region 初始化
        /// <summary>
        /// 初始化，默认key="SqlDSN"
        /// </summary>
        public SQLServer()
        {
            this.privateParameterList = new ArrayList();
        
            this.privateModuleName = this.GetType().ToString();
            SqlstringName = System.Configuration.ConfigurationManager.AppSettings["ESysName"];
            //this.privateConnectionString = SecurityService.SymmetricDecrypt(ConfigurationManager.AppSettings["SqlDSN"]);
             setstring = "";
            if (SqlstringName=="GuaTang")
            {
                 aa = ConfigurationManager.AppSettings["GuaTang"];
                setstring= SecurityService.SymmetricDecrypt(aa);
                this.privateConnectionString = setstring;
            }
            //除湿
            if (SqlstringName == "JASHI_CM")
            {
                 aa = ConfigurationManager.AppSettings["JASHI_CM"];
                setstring = SecurityService.SymmetricDecrypt(aa);
               privateConnectionString = setstring;
            }
            if (SqlstringName == "KongTiao")
            {
                 aa = ConfigurationManager.AppSettings["KongTiao"];
                setstring = SecurityService.SymmetricDecrypt(aa);
                this.privateConnectionString = setstring;

            }
            if (SqlstringName == "DianFengShan")
            {
                 aa = ConfigurationManager.AppSettings["DianFengShan"];
                setstring = SecurityService.SymmetricDecrypt(aa);
                this.privateConnectionString = setstring;

            }

        }
        #region CS的连接

        /// <summary>
        /// 取出CS的连接
        /// </summary>
        /// <param name="AppSettings"></param>
        public SQLServer(string AccessDate, int CSapp)
        {
            this.privateParameterList = new ArrayList();
            this.privateModuleName = this.GetType().ToString();
            this.privateConnectionString = ("provider=microsoft.jet.oledb.4.0;data source=" + AccessDate + ";Extended Properties=Excel 8.0;");
        }

        public SQLServer(string Accesspath, AcecExecl CEAcecExecl)
        {
            string connstring = "";
            switch (CEAcecExecl)
            {
                case AcecExecl.netAccess:
                    connstring = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + Accesspath + ";";
                    break;

                case AcecExecl.Excel:
                    connstring = "provider=microsoft.jet.oledb.4.0;data source=" + Accesspath + ";Extended Properties=Excel 8.0;";
                    break;
                case AcecExecl.Office2007Excel:
                    connstring = "provider=microsoft.jet.oledb.4.0;data source=" + Accesspath + ";Extended Properties=Excel 12.0 Xml;HDR=YES;";
                    break;
            }
            this.privateParameterList = new ArrayList();
            this.privateModuleName = this.GetType().ToString();
            this.privateConnectionString = connstring;
        }
        public SQLServer(string AppSettings, int ITD, int sTID)
        {
            this.privateParameterList = new ArrayList();
            this.privateModuleName = this.GetType().ToString();
            this.privateConnectionString = SecurityService.SymmetricDecrypt(ConfigurationManager.AppSettings[AppSettings]);
        }
        #endregion
        /// <summary>
        /// 取出不同SQL的连接key为自定义
        /// </summary>
        /// <param name="AppSettings"></param>
        public SQLServer(string AppSettings)
        {
            this.privateParameterList = new ArrayList();
            this.privateModuleName = this.GetType().ToString();
            this.privateConnectionString = SecurityService.SymmetricDecrypt(ConfigurationManager.AppSettings[AppSettings]);
        }

        /// <summary>
        /// 取出Access的连接
        /// </summary>
        /// <param name="AppSettings"></param>
        public SQLServer(string AppSettings, string AccessDate)
        {
            this.privateParameterList = new ArrayList();
            this.privateModuleName = this.GetType().ToString();
            this.privateConnectionString = SecurityService.SymmetricDecrypt(ConfigurationManager.AppSettings[AppSettings]) + HttpContext.Current.Server.MapPath(SecurityService.SymmetricDecrypt(ConfigurationManager.AppSettings[AccessDate]));
        }
        public string AccConnSeting()
        {
            return privateConnectionString;
        }


        /// <summary>
        /// 自定义连接
        /// </summary>
        /// <param name="Server"></param>
        /// <param name="Database"></param>
        /// <param name="UserName"></param>
        /// <param name="Password"></param>
        public SQLServer(string Server, string Database, string UserName, string Password)
        {
            this.privateParameterList = new ArrayList();
            string[] textArray1 = new string[] { "Server=", Server, ";Database=", Database, ";User ID=", UserName, ";Password=", Password, ";" };
            this.privateConnectionString = string.Concat(textArray1);
            this.privateModuleName = this.GetType().ToString();
        }
        /// <summary>
        /// 返回当然连接字符
        /// </summary>
        /// <param name="ConnectionString"></param>
        /// <returns></returns>
        public string ConnSettings(string ConnectionString)
        {
            return ConfigurationManager.AppSettings[ConnectionString];
        }
        #endregion
        #region 中间方法
        /// <summary>
        /// 添加储存过程
        /// </summary>
        /// <param name="ParameterName"></param>
        /// <param name="Value"></param>
        /// <param name="SQLType"></param>
        /// <param name="Size"></param>
        /// <param name="Direction"></param>
        public void AddParameter(string ParameterName, [Optional] object Value /* = null */, [Optional] SQLDataType SQLType /* = 0 */, [Optional] int Size /* = 0 */, [Optional] ParameterDirection Direction /* = 1 */)
        {

            SqlDbType type1 = new SqlDbType();
            Parameter parameter1 = null;
            switch (SQLType)
            {
                case SQLDataType.SQLString:
                    type1 = SqlDbType.VarChar;
                    break;

                case SQLDataType.SQLChar:
                    type1 = SqlDbType.Char;
                    break;

                case SQLDataType.SQLInteger:
                    type1 = SqlDbType.Int;
                    break;

                case SQLDataType.SQLBit:
                    type1 = SqlDbType.Bit;
                    break;

                case SQLDataType.SQLDateTime:
                    type1 = SqlDbType.DateTime;
                    break;

                case SQLDataType.SQLDecimal:
                    type1 = SqlDbType.Decimal;
                    break;

                case SQLDataType.SQLMoney:
                    type1 = SqlDbType.Money;
                    break;

                case SQLDataType.SQLImage:
                    type1 = SqlDbType.Image;
                    break;
                case SQLDataType.SQLText:
                    type1 = SqlDbType.Text;
                    break;
                case SQLDataType.SQLNVarChar:
                    type1 = SqlDbType.NVarChar;
                    break;
                case SQLDataType.SQLFloat:
                    type1 = SqlDbType.Float;
                    break;
            }
            parameter1 = new Parameter(ParameterName, RuntimeHelpers.GetObjectValue(Value), (SQLDataType)type1, Size, Direction);
            this.privateParameterList.Add(parameter1);
        }
        /// <summary>
        /// 清除存储过程
        /// </summary>
        public void ClearParameters()
        {
            try
            {
                this.privateParameterList.Clear();
            }
            catch (Exception exception2)
            {
                //ProjectData.SetProjectError(exception2);
                Exception exception1 = exception2;
                throw new Exception("Data Application Error. Detail Error Information can be found in the Application Log Parameter List did not clear", exception1);

            }
        }

        private SqlParameter ConvertParameters(Parameter passedParameter)
        {
            SqlParameter parameter2 = new SqlParameter();
            parameter2.ParameterName = passedParameter.ParameterName;
            parameter2.Value = RuntimeHelpers.GetObjectValue(passedParameter.ParameterValue);
            parameter2.SqlDbType = (SqlDbType)passedParameter.ParameterDataType;
            parameter2.Size = passedParameter.ParameterSize;
            parameter2.Direction = passedParameter.ParameterDirectionUsed;
            return parameter2;
        }
        /// <summary>
        /// 清除对像
        /// </summary>
        public void Disposes()
        {
            if (!this.privateDisposedBoolean)
            {
                try
                {
                    this.privateConnection.Dispose();
                }
                catch (Exception exception1)
                {
                    //ProjectData.SetProjectError(exception1);
                    //ProjectData.ClearProjectError();
                }
                finally
                {
                    base.Dispose();
                    GC.SuppressFinalize(this);
                    this.privateDisposedBoolean = true;
                }
            }
        }

        protected override void Dispose(bool disposing)
        {

            base.Dispose(disposing);
        }

        [DebuggerStepThrough]
        private void InitializeComponent()
        {

        }
        /// <summary>
        /// 出错对像处理
        /// </summary>
        /// <param name="ExceptionObject"></param>
        private void LogException(ref Exception ExceptionObject)
        {
            try
            {
                string text1 = ((("An error occured in the following module: " + this.privateModuleName + " The Source was: " + ExceptionObject.Source) + "\r\n With the Message: " + ExceptionObject.Message) + "\r\n Stack Tace: " + ExceptionObject.StackTrace) + "\r\n Target Site: " + ExceptionObject.TargetSite.ToString();
                EventLog log1 = new EventLog("Application");

            }
            catch (Exception exception2)
            {
                //ProjectData.SetProjectError(exception2);
                Exception exception1 = exception2;
                throw new Exception("Data Application Error. Detail Error Information can be found in the Application Log - EventLog Error: " + exception1.Message, exception1);

            }
        }
        #endregion
        #region 方法调用过程
        /// <summary>
        /// 带存储过程返回DataReader
        /// </summary>
        /// <param name="SPName">存储过程名称</param>
        /// <returns>SqlDataReader</returns>
        public SqlDataReader runSPDataReader(string SPName)
        {
            SqlDataReader reader1;
            this.ValidateSPStatement(ref SPName);
            IEnumerator enumerator1 = this.privateParameterList.GetEnumerator();
            try
            {
                if (this.privateDisposedBoolean)
                {
                    throw new ObjectDisposedException(this.privateModuleName, "This object has already been disposed. You cannot reuse it");
                }
                this.privateConnection = new SqlConnection(this.privateConnectionString);
                this.privateCommand = new SqlCommand(SPName, this.privateConnection);
                privateCommand.CommandTimeout = 180;
                this.privateCommand.CommandType = CommandType.StoredProcedure;
                while (enumerator1.MoveNext())
                {
                    Parameter parameter2 = null;
                    parameter2 = (Parameter)enumerator1.Current;
                    SqlParameter parameter1 = this.ConvertParameters(parameter2);
                    this.privateCommand.Parameters.Add(parameter1);
                }
                this.privateConnection.Close();
                this.privateConnection.Open();
                this.privateDataReader = this.privateCommand.ExecuteReader(CommandBehavior.CloseConnection);

                reader1 = this.privateDataReader;
            }
            catch (Exception exception2)
            {
                //ProjectData.SetProjectError(exception2);
                Exception exception1 = exception2;
                this.LogException(ref exception1);
                this.privateConnection.Close();
                throw new Exception("Data Application Error. Detail Error Information can be found in the Application Log", exception1);

            }
            return reader1;
        }
        /// <summary>
        /// 执行存储过程是否执行成功
        /// 以影响的行来的判断如果为0则失败
        /// </summary>
        /// <param name="SPName"></param>
        /// <returns></returns>
        public bool ExeSPNonQuery(string SPName)
        {
            bool intreader1 = false;
            this.ValidateSPStatement(ref SPName);
            IEnumerator enumerator1 = this.privateParameterList.GetEnumerator();
            try
            {
                if (this.privateDisposedBoolean)
                {
                    throw new ObjectDisposedException(this.privateModuleName, "This object has already been disposed. You cannot reuse it");
                }
                this.privateConnection = new SqlConnection(this.privateConnectionString);
                this.privateCommand = new SqlCommand(SPName, this.privateConnection);
                privateCommand.CommandTimeout = 180;
                this.privateCommand.CommandType = CommandType.StoredProcedure;
                while (enumerator1.MoveNext())
                {
                    Parameter parameter2 = null;
                    parameter2 = (Parameter)enumerator1.Current;
                    SqlParameter parameter1 = this.ConvertParameters(parameter2);
                    this.privateCommand.Parameters.Add(parameter1);
                }
                this.privateConnection.Close();
                this.privateConnection.Open();
                int Exeint = int.Parse(this.privateCommand.ExecuteNonQuery().ToString());
                if (Exeint > 0)
                {
                    intreader1 = true;
                }

            }
            catch (Exception exception2)
            {
                //ProjectData.SetProjectError(exception2);
                Exception exception1 = exception2;
                this.LogException(ref exception1);
                this.privateConnection.Close();
                throw new Exception("Data Application Error. Detail Error Information can be found in the Application Log", exception1);

            }
            finally
            {
                this.privateConnection.Close();
            }
            return intreader1;
        }
        /// <summary>
        /// 一条SQL语句返回是否值行成功
        /// </summary>
        /// <param name="SQL">SQL语句</param>
        /// <returns>SQLDataReader</returns>
        public int IntExeSQLNonQuery(string SQL)
        {
            int intreader1 = 0; ;
            this.ValidateSQLStatement(ref SQL);
            try
            {
                if (this.privateDisposedBoolean)
                {
                    throw new ObjectDisposedException(this.privateModuleName, "This object has already been disposed. You cannot reuse it.");
                }
                this.privateConnection = new SqlConnection(this.privateConnectionString);
                this.privateCommand = new SqlCommand(SQL + " SELECT CAST(scope_identity() AS int)", this.privateConnection);
                privateCommand.CommandTimeout = 180;
                this.privateConnection.Close();
                this.privateConnection.Open();
                int i = (int)privateCommand.ExecuteScalar();
                this.privateConnection.Close();
                if (i > 0)
                {
                    intreader1 = i;
                }
            }
            catch (Exception exception2)
            {
                //ProjectData.SetProjectError(exception2);
                Exception exception1 = exception2;
                this.LogException(ref exception1);
                this.privateConnection.Close();
                throw new Exception("Data Application Error. Detail Error Information can be found in the Application Log", exception1);

            }
            finally
            {
                this.privateConnection.Close();
            }
            return intreader1;
        }
        public string ExeSPNonQuery2(string SPName)
        {
            string strOut = "0";
            string parameterOut = "";
            this.ValidateSPStatement(ref SPName);
            IEnumerator enumerator1 = this.privateParameterList.GetEnumerator();
            try
            {
                if (this.privateDisposedBoolean)
                {
                    throw new ObjectDisposedException(this.privateModuleName, "This object has already been disposed. You cannot reuse it");
                }
                this.privateConnection = new SqlConnection(this.privateConnectionString);
                this.privateCommand = new SqlCommand(SPName, this.privateConnection);
                privateCommand.CommandTimeout = 180;
                this.privateCommand.CommandType = CommandType.StoredProcedure;
                while (enumerator1.MoveNext())
                {
                    Parameter parameter2 = null;
                    parameter2 = (Parameter)enumerator1.Current;
                    SqlParameter parameter1 = this.ConvertParameters(parameter2);
                    this.privateCommand.Parameters.Add(parameter1);
                    if (parameter1.Direction == ParameterDirection.Output)
                    {
                        parameterOut = parameter1.ParameterName;
                    }
                }
                this.privateConnection.Close();
                this.privateConnection.Open();
                int Exeint = this.privateCommand.ExecuteNonQuery();
                if (Exeint > 0)
                {
                    strOut = this.privateCommand.Parameters[parameterOut].Value.ToString();
                }

            }
            catch (Exception exception2)
            {
                //ProjectData.SetProjectError(exception2);
                Exception exception1 = exception2;
                this.LogException(ref exception1);
                this.privateConnection.Close();
                throw new Exception("Data Application Error. Detail Error Information can be found in the Application Log", exception1);

            }
            finally
            {
                this.privateConnection.Close();
            }
            return strOut;
        }
        /// <summary>
        /// 返回新插入值的ＩＤ
        /// </summary>
        /// <param name="SPName"></param>
        /// <returns></returns>
        public int ExeSPNonQueryReturnID(string SPName)
        {
            int strOut = 0;
            string parameterOut = "";
            this.ValidateSPStatement(ref SPName);
            IEnumerator enumerator1 = this.privateParameterList.GetEnumerator();
            try
            {
                if (this.privateDisposedBoolean)
                {
                    throw new ObjectDisposedException(this.privateModuleName, "This object has already been disposed. You cannot reuse it");
                }
                this.privateConnection = new SqlConnection(this.privateConnectionString);
                this.privateCommand = new SqlCommand(SPName, this.privateConnection);
                privateCommand.CommandTimeout = 180;
                this.privateCommand.CommandType = CommandType.StoredProcedure;
                while (enumerator1.MoveNext())
                {
                    Parameter parameter2 = null;
                    parameter2 = (Parameter)enumerator1.Current;
                    SqlParameter parameter1 = this.ConvertParameters(parameter2);
                    this.privateCommand.Parameters.Add(parameter1);
                    if (parameter1.Direction == ParameterDirection.Output)
                    {
                        parameterOut = parameter1.ParameterName;
                    }
                }
                this.privateConnection.Close();
                this.privateConnection.Open();
                this.privateCommand.ExecuteNonQuery();
                //if (Exeint > 0)
                //{
                strOut = int.Parse(this.privateCommand.Parameters[parameterOut].Value.ToString());
                //}

            }
            catch (Exception exception2)
            {
                //ProjectData.SetProjectError(exception2);
                Exception exception1 = exception2;
                this.LogException(ref exception1);
                this.privateConnection.Close();
                throw new Exception("Data Application Error. Detail Error Information can be found in the Application Log", exception1);

            }
            finally
            {
                this.privateConnection.Close();
            }
            return strOut;
        }
        /// <summary>
        /// 带存储过程返回DataSet
        /// </summary>
        /// <param name="SPName">存储过程名称</param>
        /// <param name="TableName">表名</param>
        /// <returns>DataSet,Table</returns>
        public DataSet runSPDataSet(string SPName, [Optional] string TableName /* = null */)
        {
            DataSet set1;
            this.ValidateSPStatement(ref SPName);
            IEnumerator enumerator1 = this.privateParameterList.GetEnumerator();
            try
            {
                if (this.privateDisposedBoolean)
                {
                    throw new ObjectDisposedException(this.privateModuleName, "This object has already been disposed. You cannot reuse it");
                }
                this.privateConnection = new SqlConnection(this.privateConnectionString);
                DataSet set2 = new DataSet();
                this.privateCommand = new SqlCommand(SPName, this.privateConnection);
                privateCommand.CommandTimeout = 180;
                this.privateCommand.CommandType = CommandType.StoredProcedure;
                while (enumerator1.MoveNext())
                {
                    Parameter parameter2 = null;
                    parameter2 = (Parameter)enumerator1.Current;
                    SqlParameter parameter1 = this.ConvertParameters(parameter2);
                    this.privateCommand.Parameters.Add(parameter1);
                }
                this.privateSQLDataAdapter = new SqlDataAdapter(this.privateCommand);
                if (TableName== null)
                {
                    this.privateSQLDataAdapter.Fill(set2);
                }
                else
                {
                    this.privateSQLDataAdapter.Fill(set2, TableName);
                }
                set1 = set2;
            }
            catch (Exception exception2)
            {
                //ProjectData.SetProjectError(exception2);
                Exception exception1 = exception2;
                this.LogException(ref exception1);
                throw new Exception("Data Application Error. Detail Error Information can be found in the Application Log", exception1);

            }
            finally
            {
                this.privateConnection.Close();
            }

            return set1;
        }

        public ArrayList runSPOutput(string SPName)
        {

            this.ValidateSPStatement(ref SPName);
            IEnumerator enumerator1 = this.privateParameterList.GetEnumerator();
            ArrayList list1 = new ArrayList();
            if (this.privateDisposedBoolean)
            {
                throw new ObjectDisposedException(this.privateModuleName, "This object has already been disposed. You cannot reuse it");
            }
            this.privateConnection = new SqlConnection(this.privateConnectionString);
            this.privateCommand = new SqlCommand(SPName, this.privateConnection);
            privateCommand.CommandTimeout = 180;
            this.privateCommand.CommandType = CommandType.StoredProcedure;
            while (enumerator1.MoveNext())
            {
                Parameter parameter3 = null;
                parameter3 = (Parameter)enumerator1.Current;
                SqlParameter parameter1 = this.ConvertParameters(parameter3);
                this.privateCommand.Parameters.Add(parameter1);
            }
            this.privateConnection.Close();
            this.privateConnection.Open();
            this.privateCommand.ExecuteNonQuery();
            foreach (SqlParameter parameter2 in this.privateCommand.Parameters)
            {
                if ((parameter2.Direction == ParameterDirection.Output) | (parameter2.Direction == ParameterDirection.ReturnValue))
                {
                    list1.Add(RuntimeHelpers.GetObjectValue(parameter2.Value));
                }
            }

            return list1;
        }
        /// <summary>
        /// 返回XML
        /// </summary>
        /// <param name="SPName"></param>
        /// <returns></returns>
        public string runSPXMLReader(string SPName)
        {
            string text2;
            this.ValidateSPStatement(ref SPName);
            IEnumerator enumerator1 = this.privateParameterList.GetEnumerator();
            try
            {
                string text1 = "";
                if (this.privateDisposedBoolean)
                {
                    throw new ObjectDisposedException(this.privateModuleName, "This object has already been disposed. You cannot reuse it");
                }
                this.privateConnection = new SqlConnection(this.privateConnectionString);
                this.privateCommand = new SqlCommand(SPName, this.privateConnection);
                privateCommand.CommandTimeout = 180;
                this.privateCommand.CommandType = CommandType.StoredProcedure;
                while (enumerator1.MoveNext())
                {
                    Parameter parameter2 = null;
                    parameter2 = (Parameter)enumerator1.Current;
                    SqlParameter parameter1 = this.ConvertParameters(parameter2);
                    this.privateCommand.Parameters.Add(parameter1);
                }
                this.privateConnection.Open();
                this.privateXMLReader = this.privateCommand.ExecuteXmlReader();
                while (this.privateXMLReader.Read())
                {
                    text1 = text1 + this.privateXMLReader.ReadOuterXml() + "<BR>";
                }

                text2 = text1;
            }
            catch (Exception exception2)
            {
                //ProjectData.SetProjectError(exception2);
                Exception exception1 = exception2;
                this.LogException(ref exception1);
                throw new Exception("Data Application Error. Detail Error Information can be found in the Application Log", exception1);

            }
            finally
            {
                this.privateXMLReader.Close();
                this.privateConnection.Close();
            }
            return text2;
        }
        /// <summary>
        /// 一条SQL语名返回SQLDataReader
        /// </summary>
        /// <param name="SQL">SQL语句</param>
        /// <returns>SQLDataReader</returns>
        public SqlDataReader runSQLDataReader(string SQL)
        {
            SqlDataReader reader1;
            this.ValidateSQLStatement(ref SQL);
            try
            {
                if (this.privateDisposedBoolean)
                {
                    throw new ObjectDisposedException(this.privateModuleName, "This object has already been disposed. You cannot reuse it.");
                }
                this.privateConnection = new SqlConnection(this.privateConnectionString);
                this.privateCommand = new SqlCommand(SQL, this.privateConnection);
                privateCommand.CommandTimeout = 180;
                this.privateConnection.Close();
                this.privateConnection.Open();
                this.privateDataReader = this.privateCommand.ExecuteReader(CommandBehavior.CloseConnection);
                reader1 = this.privateDataReader;
            }
            catch (Exception exception2)
            {
                //ProjectData.SetProjectError(exception2);
                Exception exception1 = exception2;
                this.LogException(ref exception1);
                this.privateConnection.Close();
                throw new Exception("Data Application Error. Detail Error Information can be found in the Application Log", exception1);

            }

            return reader1;
        }

        /// <summary>
        /// 一条SQL语句返回是否值行成功
        /// </summary>
        /// <param name="SQL">SQL语句</param>
        /// <returns>SQLDataReader</returns>
        public bool ExeSQLNonQuery(string SQL)
        {
            bool reader1 = false;
            this.ValidateSQLStatement(ref SQL);
            try
            {
                if (this.privateDisposedBoolean)
                {
                    throw new ObjectDisposedException(this.privateModuleName, "This object has already been disposed. You cannot reuse it.");
                }
                this.privateConnection = new SqlConnection(this.privateConnectionString);
                this.privateCommand = new SqlCommand(SQL, this.privateConnection);
                privateCommand.CommandTimeout = 180;
                this.privateConnection.Close();
                this.privateConnection.Open();
                int Exeint = this.privateCommand.ExecuteNonQuery();
                this.privateConnection.Close();
                if (Exeint > 0)
                {
                    reader1 = true;
                }
            }
            catch (Exception exception2)
            {
                //ProjectData.SetProjectError(exception2);
                Exception exception1 = exception2;
                this.LogException(ref exception1);
                this.privateConnection.Close();
                throw new Exception("Data Application Error. Detail Error Information can be found in the Application Log", exception1);

            }
            finally
            {
                this.privateConnection.Close();
            }
            return reader1;
        }
        /// <summary>
        /// 一条SQL语名返回DataSet
        /// </summary>
        /// <param name="SQL">SQL语句</param>
        /// <returns>DataSet.Table</returns>
        public DataSet runSQLDataSet(string SQL, [Optional] string TableName /* = null */)
        {
            DataSet set1;
            this.ValidateSQLStatement(ref SQL);
            try
            {
                if (this.privateDisposedBoolean)
                {
                    throw new ObjectDisposedException(this.privateModuleName, "This object has already been disposed. You cannot reuse it.");
                }
                this.privateConnection = new SqlConnection(this.privateConnectionString);
                this.privateCommand = new SqlCommand(SQL, this.privateConnection);
                privateCommand.CommandTimeout = 180;
                this.privateDataSet = new DataSet();
                this.privateSQLDataAdapter = new SqlDataAdapter(this.privateCommand);
                if (TableName== null)
                {
                    this.privateSQLDataAdapter.Fill(this.privateDataSet);
                }
                else
                {
                    this.privateSQLDataAdapter.Fill(this.privateDataSet, TableName);
                }
                set1 = this.privateDataSet;
            }
            catch (Exception exception2)
            {
                //ProjectData.SetProjectError(exception2);
                Exception exception1 = exception2;
                this.LogException(ref exception1);
                throw new Exception("Data Application Error. Detail Error Information can be found in the Application Log", exception1);

            }
            finally
            {
                this.privateConnection.Close();
            }

            return set1;
        }
        /// <summary>
        /// 返回一个XML对像
        /// </summary>
        /// <param name="SQL"></param>
        /// <returns></returns>
        public object runSQLXML(string SQL)
        {
            object obj1 = new object();
            this.ValidateSQLStatement(ref SQL);
            try
            {
                if (this.privateDisposedBoolean)
                {
                    throw new ObjectDisposedException(this.privateModuleName, "This object has already been disposed. You cannot reuse it.");
                }
                this.privateConnection = new SqlConnection(this.privateConnectionString);
                this.privateCommand = new SqlCommand(SQL, this.privateConnection);
                privateCommand.CommandTimeout = 180;
                this.privateConnection.Close();
                this.privateConnection.Open();
                this.privateCommand.ExecuteNonQuery();
            }
            catch (Exception exception2)
            {
                //ProjectData.SetProjectError(exception2);
                Exception exception1 = exception2;
                this.LogException(ref exception1);
                throw new Exception("Data Application Error. Detail Error Information can be found in the Application Log", exception1);

            }
            finally
            {
                this.privateXMLReader.Close();
                this.privateConnection.Close();
            }

            return obj1;
        }
        #endregion
        #region Access操作

        /// <summary>
        /// AcceSS数据库操作
        /// </summary>
        /// <param name="SQL"></param>
        /// <param name="TableName"></param>
        /// <returns></returns>
        public DataSet runSQLACCESSDataSet(string SQL, [Optional] string TableName /* = null */)
        {
            OleDbConnection connection1 = new OleDbConnection(); ;
            DataSet set1;
            this.ValidateSQLStatement(ref SQL);
            try
            {
                if (this.privateDisposedBoolean)
                {
                    throw new ObjectDisposedException(this.privateModuleName, "This object has already been disposed. You cannot reuse it.");
                }
                connection1 = new OleDbConnection(this.privateConnectionString);
                OleDbCommand command1 = new OleDbCommand(SQL, connection1);

                this.privateDataSet = new DataSet();
                OleDbDataAdapter adapter1 = new OleDbDataAdapter(command1);
                if (TableName==null)
                {
                    adapter1.Fill(this.privateDataSet);
                }
                else
                {
                    adapter1.Fill(this.privateDataSet, TableName);
                }
                set1 = this.privateDataSet;
            }
            catch (Exception exception2)
            {
                //ProjectData.SetProjectError(exception2);
                Exception exception1 = exception2;
                this.LogException(ref exception1);
                throw new Exception("Data Application Error. Detail Error Information can be found in the Application Log", exception1);

            }
            finally
            {
                connection1.Close();
            }
            return set1;
        }
        /// <summary>
        /// Access返回OleDbDataReader
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        public OleDbDataReader ExecuteReader(String SQL)
        {
            OleDbDataReader dr;
            this.ValidateSQLStatement(ref SQL);
            try
            {
                if (this.privateDisposedBoolean)
                {
                    throw new ObjectDisposedException(this.privateModuleName, "This object has already been disposed. You cannot reuse it.");
                }
                OleDbConnection so = new OleDbConnection(privateConnectionString);

                OleDbCommand cmd = new OleDbCommand(SQL, so);
                so.Open();
                dr = cmd.ExecuteReader(CommandBehavior.CloseConnection);

            }
            catch (Exception exception2)
            {
                //ProjectData.SetProjectError(exception2);
                Exception exception1 = exception2;
                this.LogException(ref exception1);
                throw new Exception("Data Application Error. Detail Error Information can be found in the Application Log", exception1);
            }
            return dr;
        }
        /// <summary>
        /// Access执行语句
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        public int ExeAccessNonQuery(String SQL)
        {
            int exebool = 0;
            this.ValidateSQLStatement(ref SQL);
            try
            {
                if (this.privateDisposedBoolean)
                {
                    throw new ObjectDisposedException(this.privateModuleName, "This object has already been disposed. You cannot reuse it.");
                }
                OleDbConnection so = new OleDbConnection(privateConnectionString);

                OleDbCommand cmd = new OleDbCommand(SQL, so);
                so.Open();
                exebool = cmd.ExecuteNonQuery();
                so.Close();
            }
            catch (Exception exception2)
            {
                //ProjectData.SetProjectError(exception2);
                Exception exception1 = exception2;
                this.LogException(ref exception1);
                throw new Exception("Data Application Error. Detail Error Information can be found in the Application Log", exception1);
            }
            return exebool;
        }
        #endregion
        #region 属性
        private void ValidateSPStatement(ref string SQLStatement)
        {
            if (Strings.Len((string)SQLStatement) < 2)
            {
                throw new Exception("Data Application Error. Detail Error Information can be found in the Application Log The Stored Procedure must be provided and at least 2 characters long");
            }
        }

        private void ValidateSQLStatement(ref string SQLStatement)
        {
            if (Strings.Len((string)SQLStatement) < 10)
            {
                throw new Exception("Data Application Error. Detail Error Information can be found in the Application Log The SQL Statement must be provided and at least 10 characters long");
            }
        }


        public string ConnectionString
        {
            get
            {

                return privateConnectionString;
            }
            set
            {
                this.privateConnectionString = value;
            }
        }

        public string Database
        {
            get
            {
                string text1;
                try
                {
                    text1 = this.privateDatabase;
                }
                catch (Exception exception1)
                {
                    //ProjectData.SetProjectError(exception1);
                    text1 = "";
                    //ProjectData.ClearProjectError();
                    return text1;

                }
                return text1;
            }
            set
            {
                this.privateDatabase = value;
            }
        }

        public string Password
        {
            get
            {
                string text1;
                try
                {
                    text1 = this.privatePassword;
                }
                catch (Exception exception1)
                {
                    //ProjectData.SetProjectError(exception1);
                    text1 = "";
                    //ProjectData.ClearProjectError();
                    return text1;

                }
                return text1;
            }
            set
            {
                this.privatePassword = value;
            }
        }

        public string Server
        {
            get
            {
                string text1;
                try
                {
                    text1 = this.privateUserName;
                }
                catch (Exception exception1)
                {
                    //ProjectData.SetProjectError(exception1);
                    text1 = "";
                    //ProjectData.ClearProjectError();
                    return text1;

                }
                return text1;
            }
            set
            {
                this.privateUserName = value;
            }
        }

        public string UserName
        {
            get
            {
                string text1;
                try
                {
                    text1 = this.privateUserName;
                }
                catch (Exception exception1)
                {
                    //ProjectData.SetProjectError(exception1);
                    text1 = "";
                    //ProjectData.ClearProjectError();
                    return text1;

                }
                return text1;
            }
            set
            {
                this.privateUserName = value;
            }
        }
        public enum SQLDataType
        {
            SQLString,
            SQLChar,
            SQLInteger,
            SQLBit,
            SQLDateTime,
            SQLDecimal,
            SQLMoney,
            SQLImage,
            SQLText,
            SQLNVarChar,
            SQLFloat
        }

        public enum AcecExecl
        {
            netAccess,
            Excel,
            Office2007Excel
        }


        public class Parameter
        {
            public Parameter(string passedParameterName, [Optional] object passedValue /* = null */, [Optional] SQLServer.SQLDataType passedSQLType /* = 0 */, [Optional] int passedSize /* = 0 */, [Optional] ParameterDirection passedDirection /* = 1 */)
            {
                this.ParameterName = passedParameterName;
                this.ParameterValue = RuntimeHelpers.GetObjectValue(passedValue);
                this.ParameterDataType = passedSQLType;
                this.ParameterSize = passedSize;
                this.ParameterDirectionUsed = passedDirection;
            }


            public SQLServer.SQLDataType ParameterDataType;
            public ParameterDirection ParameterDirectionUsed;
            public string ParameterName;
            public int ParameterSize;
            public object ParameterValue;
        }


        #endregion
    }
}

